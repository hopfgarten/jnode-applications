/*
 * Copyright (c) 2011
 * Telecooperation Office (TecO), Universitaet Karlsruhe (TH), Germany.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above
 *    copyright notice, this list of conditions and the following
 *    disclaimer in the documentation and/or other materials provided
 *    with the distribution.
 * 3. Neither the name of the Universitaet Karlsruhe (TH) nor the names
 *    of its contributors may be used to endorse or promote products
 *    derived from this software without specific prior written
 *    permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * Author(s): Philipp Scholl <scholl@teco.edu>
 */

#include "contiki.h"
#include "contiki-net.h"
#include "dev/slip.h"
#include "dev/leds.h"
#include "mac.h"
#include "ieee802.h"
#include "bridge_aux.h"
#include "sicslowpan.h"
#include "net/netstack.h"
#include "cfs-fatfs.h"

PROCESS(slipbr_process, "Serial Line IP Bridge process");
PROCESS(test_process, "Test");
AUTOSTART_PROCESSES(&slipbr_process, &test_process);

#define USB_INACTIVE 0
#define USB_RNDIS    1
#define USB_SD       2

static uint8_t usb_mode = USB_INACTIVE;


void
lowpan2eth()
{
  mac_LowpanToEthernet();
  slip_send();
}

void
eth2lowpan()
{
  
  if (!strcmp((char*)&uip_buf[UIP_LLH_LEN], "RNDIS")) {  
    process_exit(&tcpip_process);
    sicslowpan_tcpip_input = lowpan2eth;
    usb_mode = USB_RNDIS;
    
  }
  else if (!strcmp((char*)&uip_buf[UIP_LLH_LEN], "SD")) {
    cfs_shutdown();
    usb_mode = USB_SD;        
  }

  if (usb_mode == USB_RNDIS) {
    uip_lladdr_t *destaddr;

    if (uip_len == 4 && strncmp((char*) uip_buf, "?IPA", 4))
      return; /* ignore */

    /* TODO: where on the read is this header added?! */
    memmove(uip_buf, &uip_buf[UIP_LLH_LEN], uip_len);
    destaddr = mac_ethernetToLowpan();
  

    if(destaddr!=NULL)
    {
      sicslowpan_output(destaddr);
    }
    else
    {
      uip_log("bridge: translation failed\n");
    }
  }
}

PROCESS_THREAD(slipbr_process, ev, data)
{
  PROCESS_BEGIN();
  uip_log("bridge: starting\n");



  /* rewire wpan interface to lowpan2eth() and other interface to eth2lowpan(),
   * this is ulgy I know */

  slip_set_input_callback(eth2lowpan);

  /* now start the slip process */
  slip_arch_init(38400);
  process_start(&slip_process, NULL);

  /* wait until killed then rewire network layer to tcpip layer */
  PROCESS_YIELD_UNTIL(ev==PROCESS_EVENT_EXIT);
  uip_log("bridge: exiting\n");

  PROCESS_END();
}

PROCESS_THREAD(test_process, ev, data)
{
  static struct uip_udp_conn *udp;

  PROCESS_BEGIN(); 

  udp = udp_new(NULL, UIP_HTONS(10000), NULL);
  uip_udp_bind(udp, UIP_HTONS(10000));

  while(1)
  {
    PROCESS_YIELD_UNTIL(ev == tcpip_event);
    leds_toggle(LEDS_ALL);
  }

  PROCESS_END();
}
